[client]
port = 8889
socket = /Applications/MAMP/tmp/mysql/mysql.sock

[mysqld]
user = mysql
port = 8889
socket = /Applications/MAMP/tmp/mysql/mysql.sock
#basedir = 
datadir = /Applications/MAMP/db/mysql56/
default-storage-engine = InnoDB
default-time-zone = system
character-set-server = utf8
connect-timeout = 8
explicit_defaults_for_timestamp = true

skip-name-resolve
skip-symbolic-links
#skip-networking

# 操作系统在监听队列中所能保持的连接数,
back_log = 50

# 允许的同时会话数的上限
max_connections = 512

# 每个客户端连接最大的错误允许数量
max_connect_errors = 6

# 使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启
external-locking = FALSE 

# 服务所能处理的请求包的最大大小
max_allowed_packet = 16M

# 排序ORDER BY|GROUP BY|JOIN缓存
sort_buffer_size = 8M
join_buffer_size = 8M

# 客户端断开连接后,如果cache中的线程少于thread_cache_size,则客户端线程被放入cache中. 设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大
thread_cache_size = 8

# 查询SELECT缓存
query_cache_size = 32M

# 只有小于此设定值的结果才会被缓存
query_cache_limit = 2M

# 默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费
query_cache_min_res_unit = 2k

# 被全文检索索引的最小的字长.
# ft_min_word_len = 8

# 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的 mysql 在在内存高度紧张的时候,数据在内存中保持锁定并且防止可能被 swapping out
# 此选项对于性能有益
#memlock

# 线程使用的堆大小. 此容量的内存在每次连接时被预留
thread_stack = 128K

# 设定默认的事务隔离级别.可用的级别如下:READ UNCOMMITTED-读未提交 READ COMMITTE-读已提交 REPEATABLE READ -可重复读 SERIALIZABLE -串行
transaction_isolation = READ-COMMITTED

# 内存中临时表的最大大小
tmp_table_size = 64M
max_heap_table_size = 64M

# mysql线程所打开表的数量
table_open_cache = 2048

# 独立的内存表所允许的最大容量.
max_heap_table_size = 32M

# mysql不区分大小写
lower_case_table_names = 1

#***************** MyISAM 相关选项 ***
# 批定用于索引的缓冲区大小，增加它可以得到更好的索引处理性能，对于内存在4GB左右的服务器来说，该参数可设置为256MB或384MB。
key_buffer_size = 128M

#  MySql读入缓冲区大小
read_buffer_size = 2M

#  MYSQL随机读缓冲区大小
read_rnd_buffer_size = 1M

# 批量插入数据缓存大小，可以有效提高插入效率，默认为8M
bulk_insert_buffer_size = 64M  

# MyISAM表发生变化时重新排序所需的缓冲 默认8M
myisam_sort_buffer_size = 128M  

#  默认为1 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们. 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.
myisam_repair_threads = 1 

# 默认关闭 Federated
skip-federated

#***************** INNODB 相关选项 ***
# 如果你的 MySQL 服务包含 InnoDB 支持但是并不打算使用的话, 使用此选项会节省内存以及磁盘空间,并且加速某些部分
#skip-innodb


# 如果你发现 InnoDB 表空间损坏, 设置此值为一个非零值可能帮助你导出你的表. 从1开始并且增加此值知道你能够成功的导出表.
#innodb_force_recovery=1

# 由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存
innodb_buffer_pool_size = 892M 

# 表空间文件 重要数据
innodb_data_file_path = ibdata1:10M:autoextend 

# 文件IO的线程数，一般为 4
innodb_file_io_threads = 4

# 服务器有几个CPU就设置为几
# innodb_thread_concurrency = 1 

# 设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次
innodb_flush_log_at_trx_commit = 2  

# 加速 InnoDB 的关闭. 这会阻止 InnoDB 在关闭时做全清除以及插入缓冲合并.
innodb_fast_shutdown

# 确定些日志文件所用的内存大小
innodb_log_buffer_size = 8M 

# 确定数据日志文件的大小
innodb_log_file_size = 48M

# 控制了Dirty_Page在Buffer_Pool中所占的比率
innodb_max_dirty_pages_pct = 75

# MySQL可以以循环方式将日志文件写到多个文件
innodb_log_files_in_group = 3 

# 指示MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数)
innodb_lock_wait_timeout = 60 

# 独享表空间
innodb_file_per_table = on 

[mysql]
# 这个配置段设置启动MySQL服务的条件；在这种情况下，no-auto-rehash确保这个服务启动得比较快。
no-auto-rehash

[mysqldump]
quick
max_allowed_packet = 32M

[mysqlhotcopy]
interactive-timeout

[myisamchk]
key_buffer = 16M
sort_buffer_size = 16M
read_buffer = 8M
write_buffer = 8M

[mysqld_safe]
log-error = /Applications/MAMP/logs/mysql_error.log
expire_logs_days = 4
open-files-limit = 8192
pid-file = /Applications/MAMP/tmp/mysql/mysql.pid

#开启慢查询日志记录
slow_query_log=1
long_query_time=0.1
log_queries_not_using_indexes=1
slow-query-log-file=/Applications/MAMP/logs/mysql_slow.log

sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES  
