;;;;;;;;;;;;;;;;;;;;;
; FPM Configuration ;
;;;;;;;;;;;;;;;;;;;;;
;include=etc/fpm.d/*.conf

;;;;;;;;;;;;;;;;;;
; Global Options ;
;;;;;;;;;;;;;;;;;;

[global]
;pid文件设置
;pid = run/php-fpm.pid

;错误日志
;error_log = log/php-fpm.log

;syslog.facility = daemon
;syslog.ident = php-fpm

; 错误日志级别: alert, error, warning, notice, debug
;log_level = notice

;在60s内如果出现SIGSEGV或SIGBUS错误的PHP-CGI进程数量超过60个,php-fpm会自动重启;不用开启保持默认即可
;emergency_restart_threshold = 60
;emergency_restart_interval = 60s


;子进程接受主进程复用信号的超时时间: s,m,h,d
;process_control_timeout = 0
;process.max = 128
;process.priority = -19

;后台运行php-fpm,默认值为yes
;daemonize = yes

; 设置文件打开描述符的rlimit限制, 使用ulimit -n查看
;rlimit_files = 1024

; 设置核心rlimit最大限制值: unlimited|0|100
;rlimit_core = 0

;events.mechanism = epoll
;systemd_interval = 10

;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ; 
;;;;;;;;;;;;;;;;;;;;
; Multiple pools of child processes may be started with different listening
; ports and different management options.  The name of the pool will be
; used in logs and stats. There is no limitation on the number of pools which
; FPM can handle. Your system will tell you anyway :)

; Start a new pool named 'www'.
; the variable $pool can we used in any directive and will be replaced by the
; pool name ('www' here)
[www]

; Per pool prefix
; It only applies on the following directives:
; - 'access.log'
; - 'slowlog'
; - 'listen' (unixsocket)
; - 'chroot'
; - 'chdir'
; - 'php_values'
; - 'php_admin_values'
; When not set, the global prefix (or /usr/local/php) applies instead.
; Note: This directive can also be relative to the global prefix.
; Default Value: none
;prefix = /path/to/pools/$pool

; php-fpm的进程的帐户和组
user = nobody
group = nobody

; php-fpm的监听端口: socket|ipaddr
listen = 127.0.0.1:9000

; backlog数, -1表示无限制, 由操作系统决定, 此行注释掉就行
;listen.backlog = 65535

; unix socket设置选项, 如果使用tcp方式访问, 这里注释即可
;listen.owner = nobody
;listen.group = nobody
;listen.mode = 0660
;listen.acl_users =
;listen.acl_groups =

; 允许访问FastCGI进程的IP: any|ip|ip1,ip2,ip3
;listen.allowed_clients = 127.0.0.1

;process.priority = -19


; php-fpm子进程控制: static|dynamic|ondemand
; static - 由pm.max_children指定固定的子进程数
; dynamic - pm.max_children,start,min,max控制
; ondemand - pm.max_children, pm.process_iden_timout
pm = dynamic

; php-fpm子进程最大数
pm.max_children = 32

; php-fpm启动时的进程数,pm=dynamic时有效, 计算: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.start_servers = 9

; 保证php-fpm空闲进程数最小值, pm=dynamic时有效, 如果空闲进程小于此值, 则创建新的子进程
pm.min_spare_servers = 2

; 保证php-fpm空闲进程数最大值, pm=dynamic时有效,如果空闲进程大于此值, 此进行清理
pm.max_spare_servers = 16

; The number of seconds after which an idle process will be killed.
; Note: Used only when pm is set to 'ondemand'
; Default Value: 10s
;pm.process_idle_timeout = 10s;
 
; 每个子进程重生前能处理的最大请求数量: 0|100
pm.max_requests = 64

;FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到
;pm.status_path = /status
 
;FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)
;ping.path = /ping

; 用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.
;ping.response = pong

; 请求日志文件
;access.log = log/$pool.access.log

; 请求日志文件格式
;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"
 
; php-fpm慢请求日志文件
slowlog = log/$pool.log.slow
 
; 当一个请求超过4s后则记录到slowlog中: s,m,h,d
request_slowlog_timeout = 4s
 
; 单个请求的超时中止时间, 对超过php.ini设置的max_execution_time执行时间的脚本有用.
;request_terminate_timeout = 0
  
; 设置文件打开描述符的rlimit限制, 使用ulimit -n查看
rlimit_files = 1024

; 设置核心rlimit最大限制值: unlimited|0|100
;rlimit_core = 0
 
; 启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.
;chroot = 
 
; 设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径
;chdir = /var/www
 
; 重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.
;catch_workers_output = yes

; Clear environment in FPM workers
; Prevents arbitrary environment variables from reaching FPM worker processes
; by clearing the environment in workers before env vars specified in this
; pool configuration are added.
; Setting to "no" will make all environment variables available to PHP code
; via getenv(), $_ENV and $_SERVER.
; Default Value: yes
;clear_env = no

; Limits the extensions of the main script FPM will allow to parse. This can
; prevent configuration mistakes on the web server side. You should only limit
; FPM to .php extensions to prevent malicious users to use other extensions to
; exectute php code.
; Note: set an empty value to allow all extensions.
; Default Value: .php
;security.limit_extensions = .php .php3 .php4 .php5
 
; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
;env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin
;env[TMP] = /tmp
;env[TMPDIR] = /tmp
;env[TEMP] = /tmp

; Additional php.ini defines, specific to this pool of workers. These settings
; overwrite the values previously defined in the php.ini. The directives are the
; same as the PHP SAPI:
;   php_value/php_flag             - you can set classic ini defines which can
;                                    be overwritten from PHP call 'ini_set'. 
;   php_admin_value/php_admin_flag - these directives won't be overwritten by
;                                     PHP call 'ini_set'
; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

; Defining 'extension' will load the corresponding shared extension from
; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
; overwrite previously defined php.ini values, but will append the new value
; instead.

; Note: path INI options can be relative and will be expanded with the prefix
; (pool, global or /usr/local/php)

; Default Value: nothing is defined by default except the values in php.ini and
;                specified at startup with the -d argument
;php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f www@my.domain.com
;php_flag[display_errors] = off
;php_admin_value[error_log] = /var/log/fpm-php.www.log
;php_admin_flag[log_errors] = on
;php_admin_value[memory_limit] = 32M
