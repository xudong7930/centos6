# nginx worker进程运行用户以及用户组
user  nobody nobody;

# nginx worker数量: cpu_core_num*2 | auto
worker_processes  auto;

# 指定一个nginx进程可以打开的最多文件描述符数目
worker_rlimit_nofile  65535;

# 全局错误日志文件，日志输出级别有debug、info、notice、warn、error、crit
error_log  logs/error.log  notice;

# 指定主进程id的存储文件位置
pid  logs/nginx.pid;

# 设定nginx的工作模式及连接数上限
events {
    # epoll是多路复用IO中的一种方式,可大大提高nginx性能
    use epoll;

    # Per Worker process max connects
    worker_connections  1024;

    multi_accept  on;
}

http {
    # 设定mime类型
    include       mime.types;

    # 不显示nginx版本
    server_tokens off;

    # 默认文件类型
    default_type  application/octet-stream;

    # autoindex
	autoindex on;
    autoindex_exact_size off;
    autoindex_localtime on;

	charset utf-8;

    server_names_hash_bucket_size 64;
	fastcgi_read_timeout 300;

    # log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  other '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent $request_body "$http_referer" "$http_user_agent" $http_x_forwarded_for';

    access_log  logs/access.log  main;
    access_log  logs/access.other.log  other;

    # sendfile 指定nginx是否调用sendfile函数来输出文件,对于普通应用,必须设on;如果是用于下载的重IO应用,可设置为off
    sendfile     on;
    tcp_nopush  on;
    tcp_nodelay  on;

    # 连接超时
    keepalive_timeout  65;
    keepalive_requests  10000;
    types_hash_max_size  2048;

    server_tokens  off;
    dav_methods  off;

    #gzip settings;
    gzip  on;
    gzip_disable  "msie6";
    gzip_vary  on;
    gzip_proxied  any;
    gzip_comp_level  6;
    gzip_buffers  16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;


    #设定请求缓冲
    client_header_buffer_size  128k;
    large_client_header_buffers  4 128k;

    #全局变量
    geo $version {
        default "v2";
    }

    server {
        listen       80;
        server_name  localhost;

        #access_log  logs/host.access.log  main;

        location / {
            #config Ajax cross domain
            add_header 'Access-Control-Allow-Origin: *';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET';

            root   d:/wnmp/www;
            index  index.html index.htm index.php;
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9090
        #
        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9090;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # phpadm.io
    server {
        listen  80;
        server_name phpadm.io;
        set $webroot D:/wnmp/nginx/html/phpMyAdmin;

        location / {
            root $webroot;
            index index.html index.php;
        }

        # parse php file
        location ~ \.php$ {
            root $webroot;
            fastcgi_pass   127.0.0.1:9090;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }

}
